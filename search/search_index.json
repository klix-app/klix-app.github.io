{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This documentation describes Klix checkout solution integration. Multiple integration scenarios are covered: Simple merchant home page that does not have an in-built shopping cart functionality. Klix Widget can be predefined to allow to buy a specific product. Klix Widget HTML code should be placed on a product page. No additional technical integration actions need to be performed by the merchant if orders are managed in Klix. Custom built or standard e-commerce platform web-shop. In this case besides placing Klix Widget HTML code on merchant check-out page bidirectional API integration should be implemented.","title":"Overview"},{"location":"#overview","text":"This documentation describes Klix checkout solution integration. Multiple integration scenarios are covered: Simple merchant home page that does not have an in-built shopping cart functionality. Klix Widget can be predefined to allow to buy a specific product. Klix Widget HTML code should be placed on a product page. No additional technical integration actions need to be performed by the merchant if orders are managed in Klix. Custom built or standard e-commerce platform web-shop. In this case besides placing Klix Widget HTML code on merchant check-out page bidirectional API integration should be implemented.","title":"Overview"},{"location":"api/","text":"Klix API Version: 1 Security token apiKey API Key Name Authorization In header /merchants/{merchantId}/orders DELETE Summary: rejectMerchantOrderByExternalId Parameters Name Located in Description Required Schema externalOrderId query externalOrderId Yes string merchantId path merchantId Yes string (uuid) rawBody body rawBody Yes string Responses Code Description 200 OK /merchants/{merchantId}/orders/{orderId} GET Summary getOrder Parameters Name Located in Description Required Schema X-KLIX-Api-Key header X-KLIX-Api-Key Yes string merchantId path merchantId Yes string (uuid) orderId path orderId Yes string Responses Code Description Schema 200 OK MerchantOrderDTO 500 Internal Server Error ErrorResponseModel PUT Summary: verifyMerchantOrder Parameters Name Located in Description Required Schema merchantId path merchantId Yes string (uuid) orderId path orderId Yes string (uuid) rawBody body rawBody Yes string Responses Code Description Schema 200 OK 500 Internal Server Error ErrorResponseModel DELETE Summary: rejectMerchantOrder Parameters Name Located in Description Required Schema merchantId path merchantId Yes string (uuid) orderId path orderId Yes string (uuid) rawBody body rawBody Yes string Responses Code Description 200 OK Models Address Name Type Description Required city string No country string No latitude double No longitude double No postal_code string No street string No Card Name Type Description Required bin string No Company Name Type Description Required address string No name string No registration_number string No vat_number string No Customer Name Type Description Required email string No first_name string No last_name string No phone_number string No MerchantOrderDTO Name Type Description Required amount number No company Company No currency string No customer Customer No effective_amount number No id string (uuid) No items [ OrderItem ] No merchant_urls MerchantUrls No order_id string No payment Payment No shipping Shipment No status string No tax_amount number No total_amount number No MerchantShippingMethod Name Type Description Required id string No name string No MerchantUrls Name Type Description Required confirmation string No place_order string No terms string No verification string No OrderItem Name Type Description Required amount number No label string No order_item_id string No quantity number No tax_amount number No tax_rate number No total_amount number No type string No unit string No Payment Name Type Description Required card Card No error PaymentError No method string No status string No PaymentError Name Type Description Required code string No message string No PickupPoint Name Type Description Required comments string No external_id string No name string No service_hours string No Shipment Name Type Description Required address Address No contact_phone string No date string No method MerchantShippingMethod No pickup_point PickupPoint No type string No","title":"API"},{"location":"api/#klix-api","text":"","title":"Klix API"},{"location":"api/#version-1","text":"","title":"Version: 1"},{"location":"api/#security","text":"token apiKey API Key Name Authorization In header","title":"Security"},{"location":"api/#merchantsmerchantidorders","text":"","title":"/merchants/{merchantId}/orders"},{"location":"api/#delete","text":"","title":"DELETE"},{"location":"api/#summary","text":"rejectMerchantOrderByExternalId","title":"Summary:"},{"location":"api/#parameters","text":"Name Located in Description Required Schema externalOrderId query externalOrderId Yes string merchantId path merchantId Yes string (uuid) rawBody body rawBody Yes string","title":"Parameters"},{"location":"api/#responses","text":"Code Description 200 OK","title":"Responses"},{"location":"api/#merchantsmerchantidordersorderid","text":"","title":"/merchants/{merchantId}/orders/{orderId}"},{"location":"api/#get","text":"","title":"GET"},{"location":"api/#summary_1","text":"getOrder","title":"Summary"},{"location":"api/#parameters_1","text":"Name Located in Description Required Schema X-KLIX-Api-Key header X-KLIX-Api-Key Yes string merchantId path merchantId Yes string (uuid) orderId path orderId Yes string","title":"Parameters"},{"location":"api/#responses_1","text":"Code Description Schema 200 OK MerchantOrderDTO 500 Internal Server Error ErrorResponseModel","title":"Responses"},{"location":"api/#put","text":"","title":"PUT"},{"location":"api/#summary_2","text":"verifyMerchantOrder","title":"Summary:"},{"location":"api/#parameters_2","text":"Name Located in Description Required Schema merchantId path merchantId Yes string (uuid) orderId path orderId Yes string (uuid) rawBody body rawBody Yes string","title":"Parameters"},{"location":"api/#responses_2","text":"Code Description Schema 200 OK 500 Internal Server Error ErrorResponseModel","title":"Responses"},{"location":"api/#delete_1","text":"","title":"DELETE"},{"location":"api/#summary_3","text":"rejectMerchantOrder","title":"Summary:"},{"location":"api/#parameters_3","text":"Name Located in Description Required Schema merchantId path merchantId Yes string (uuid) orderId path orderId Yes string (uuid) rawBody body rawBody Yes string","title":"Parameters"},{"location":"api/#responses_3","text":"Code Description 200 OK","title":"Responses"},{"location":"api/#models","text":"","title":"Models"},{"location":"api/#address","text":"Name Type Description Required city string No country string No latitude double No longitude double No postal_code string No street string No","title":"Address"},{"location":"api/#card","text":"Name Type Description Required bin string No","title":"Card"},{"location":"api/#company","text":"Name Type Description Required address string No name string No registration_number string No vat_number string No","title":"Company"},{"location":"api/#customer","text":"Name Type Description Required email string No first_name string No last_name string No phone_number string No","title":"Customer"},{"location":"api/#merchantorderdto","text":"Name Type Description Required amount number No company Company No currency string No customer Customer No effective_amount number No id string (uuid) No items [ OrderItem ] No merchant_urls MerchantUrls No order_id string No payment Payment No shipping Shipment No status string No tax_amount number No total_amount number No","title":"MerchantOrderDTO"},{"location":"api/#merchantshippingmethod","text":"Name Type Description Required id string No name string No","title":"MerchantShippingMethod"},{"location":"api/#merchanturls","text":"Name Type Description Required confirmation string No place_order string No terms string No verification string No","title":"MerchantUrls"},{"location":"api/#orderitem","text":"Name Type Description Required amount number No label string No order_item_id string No quantity number No tax_amount number No tax_rate number No total_amount number No type string No unit string No","title":"OrderItem"},{"location":"api/#payment","text":"Name Type Description Required card Card No error PaymentError No method string No status string No","title":"Payment"},{"location":"api/#paymenterror","text":"Name Type Description Required code string No message string No","title":"PaymentError"},{"location":"api/#pickuppoint","text":"Name Type Description Required comments string No external_id string No name string No service_hours string No","title":"PickupPoint"},{"location":"api/#shipment","text":"Name Type Description Required address Address No contact_phone string No date string No method MerchantShippingMethod No pickup_point PickupPoint No type string No","title":"Shipment"},{"location":"callbacks/","text":"Callbacks Callback URLs During order lifecycle Klix invokes API end-points implemented by merchant store. All URLs should be implemented and accessible via HTTPS in order to be callable by Klix. URL Type Example Description Terms Conditions URL https://merchant.com/terms.html HTTP GET request is sent from user device (browser or mobile) to check merchant legally binding agreement text. Merchant Callback URL https://merchant.com/callbacks HTTP OPTIONS request is sent from Klix backend to check if HTTP connection can be established. This end-point should return HTTP status 200 and header Access-Control-Allow-Methods should contain POST method. Order verification URL https://merchant.com/orders HTTP POST request is sent from Klix backend to this end-point whenever a customer submits an order in the checkout form. Merchant store should validate order data (check if selected product/service price is valid and is available in stock etc.) and either approve or reject an order. Note that Klix does not send full order information in notification request body. Only order identifier is sent as a JWS payload. You should check JWS signature, Base64 decode request payload to extract order identifier and use Klix API to retrieve order data by order identifier. Example JWS sent as a notification body: eyJraWQiOiJNUGF5IiwiYWxnIjoiUlMyNTYifQ . eyJvcmRlcklkIjoiMWE2YTUzNjgtZTc5OS00OTY3LWI3NDItNjdhZGMxNmFlYzhhIn0 . OZQU_2nPKUWl93U8YJJ9GjzZlLmmKS7ffuVu1WSZ5Y4JSU65LJxYs3kj0a460abXsBLkkVGX1Hi89fxNJ8CMsQ . Base64 decoding middle part of this JWS token will lead to following JSON document { orderId : 1a6a5368-e799-4967-b742-67adc16aec8a , externalOrderId : 1233456789 } , where orderId is Klix order identifier and externalOrderId is order identifier in merchant's system. Purchase notification URL https://merchant.com/purchases HTTP POST request is sent from Klix backend to confirm that payment has either been collected successfully on behalf of the merchant or either payment has been cancelled. JWS payload contains both order identifier, external order identifier (order identifier in merchant's system) status e.g. { status : PAYMENT_APPROVED , orderId : dfe50808-1771-4015-98bd-dac1f16fa6c3 , externalOrderId : 1233456789 } in case of successful payment or { status : PAYMENT_REJECTED , orderId : dfe50808-1771-4015-98bd-dac1f16fa6c3 , externalOrderId : 1233456789 , errorMessage : Decline, expired card , errorCode : 101 } in case of failed or cancelled payment. Note that error code and message might not be present even in case of failed payment. Shipping cost calculation URL https://merchant.com/shipping-cost HTTP POST request is sent from Klix backend in order to calculate shipping costs for certain order. Note that this end-point should be implemented only in case merchant supports dynamic pricing delivery i.e. delivery price can be determined only after Klix client has entered delivery address. Otherwise different delivery option cost can be passed as Klix Widget parameter. See Shipping cost calculation request JWS payload example Shipping cost calculation request JWS payload example Note that pickup_point is present only if customer has selected a delivery to pickup point, address is present both in case of delivery to address specified by customer and delivery to pickup point. { order_id : 05957e7f-803f-46f0-9100-1c3e10199b43 , order_items : [ { reference : QZT-213 , quantity : 2.000 }, { reference : TP-LNK-3840 , quantity : 1.000 } ], shipping_method_id : omniva , address : { city : R\u012bga , address : K.Valdem\u0101ra 62, R\u012bga , postal_code : LV-1013 }, pickup_point : { external_id : 9111 , name : R\u012bgas Bri\u0101na ielas Rimi pakom\u0101ts , comments : Pa labi no galven\u0101s ieejas , service_hours : P-Pk.pieg\u0101de 10:00, iz\u0146em\u0161ana 17:00 Sestdien\u0101s pieg\u0101de 14:00,iz\u0146em\u0161ana 14:00 } } Updating callback URLs URLs can be set in Merchant Console settings.","title":"Callbacks"},{"location":"callbacks/#callbacks","text":"","title":"Callbacks"},{"location":"callbacks/#callback-urls","text":"During order lifecycle Klix invokes API end-points implemented by merchant store. All URLs should be implemented and accessible via HTTPS in order to be callable by Klix. URL Type Example Description Terms Conditions URL https://merchant.com/terms.html HTTP GET request is sent from user device (browser or mobile) to check merchant legally binding agreement text. Merchant Callback URL https://merchant.com/callbacks HTTP OPTIONS request is sent from Klix backend to check if HTTP connection can be established. This end-point should return HTTP status 200 and header Access-Control-Allow-Methods should contain POST method. Order verification URL https://merchant.com/orders HTTP POST request is sent from Klix backend to this end-point whenever a customer submits an order in the checkout form. Merchant store should validate order data (check if selected product/service price is valid and is available in stock etc.) and either approve or reject an order. Note that Klix does not send full order information in notification request body. Only order identifier is sent as a JWS payload. You should check JWS signature, Base64 decode request payload to extract order identifier and use Klix API to retrieve order data by order identifier. Example JWS sent as a notification body: eyJraWQiOiJNUGF5IiwiYWxnIjoiUlMyNTYifQ . eyJvcmRlcklkIjoiMWE2YTUzNjgtZTc5OS00OTY3LWI3NDItNjdhZGMxNmFlYzhhIn0 . OZQU_2nPKUWl93U8YJJ9GjzZlLmmKS7ffuVu1WSZ5Y4JSU65LJxYs3kj0a460abXsBLkkVGX1Hi89fxNJ8CMsQ . Base64 decoding middle part of this JWS token will lead to following JSON document { orderId : 1a6a5368-e799-4967-b742-67adc16aec8a , externalOrderId : 1233456789 } , where orderId is Klix order identifier and externalOrderId is order identifier in merchant's system. Purchase notification URL https://merchant.com/purchases HTTP POST request is sent from Klix backend to confirm that payment has either been collected successfully on behalf of the merchant or either payment has been cancelled. JWS payload contains both order identifier, external order identifier (order identifier in merchant's system) status e.g. { status : PAYMENT_APPROVED , orderId : dfe50808-1771-4015-98bd-dac1f16fa6c3 , externalOrderId : 1233456789 } in case of successful payment or { status : PAYMENT_REJECTED , orderId : dfe50808-1771-4015-98bd-dac1f16fa6c3 , externalOrderId : 1233456789 , errorMessage : Decline, expired card , errorCode : 101 } in case of failed or cancelled payment. Note that error code and message might not be present even in case of failed payment. Shipping cost calculation URL https://merchant.com/shipping-cost HTTP POST request is sent from Klix backend in order to calculate shipping costs for certain order. Note that this end-point should be implemented only in case merchant supports dynamic pricing delivery i.e. delivery price can be determined only after Klix client has entered delivery address. Otherwise different delivery option cost can be passed as Klix Widget parameter. See Shipping cost calculation request JWS payload example","title":"Callback URLs"},{"location":"callbacks/#shipping-cost-calculation-request-jws-payload-example","text":"Note that pickup_point is present only if customer has selected a delivery to pickup point, address is present both in case of delivery to address specified by customer and delivery to pickup point. { order_id : 05957e7f-803f-46f0-9100-1c3e10199b43 , order_items : [ { reference : QZT-213 , quantity : 2.000 }, { reference : TP-LNK-3840 , quantity : 1.000 } ], shipping_method_id : omniva , address : { city : R\u012bga , address : K.Valdem\u0101ra 62, R\u012bga , postal_code : LV-1013 }, pickup_point : { external_id : 9111 , name : R\u012bgas Bri\u0101na ielas Rimi pakom\u0101ts , comments : Pa labi no galven\u0101s ieejas , service_hours : P-Pk.pieg\u0101de 10:00, iz\u0146em\u0161ana 17:00 Sestdien\u0101s pieg\u0101de 14:00,iz\u0146em\u0161ana 14:00 } }","title":"Shipping cost calculation request JWS payload example"},{"location":"callbacks/#updating-callback-urls","text":"URLs can be set in Merchant Console settings.","title":"Updating callback URLs"},{"location":"checkout-flow/","text":"Checkout Flow Order placement could be reflected as sequence diagram with three main parties: customer, KLiX system and Merchant eCommerce system. Place new order - customer is creating new order in one of merchant sales channels (mobile, recurring payment, checkout widget). Notify about new order - merchant gets notified about new pending order. Merchant gets information about items being requested as well as shipment options and specified shipment address. Merchant is required to make a decision about either approving or declining the submitted order. Get pending order details - Merchant receives a callback about new order without all order details. Merchant is required to retrieve a detailed information about order to make a decision. Validate order details and inventory - after receiving full order data merchant should check pricing, shipment options and inventory availability. If everything is ok, merchant should approve order, if not order should be declined. At this moment funds are not yet authorized from customer payment method. Approve order - order gets approved after inventory and pricing check as well as internal fraud rules if such exist. Items should be marked as unavailable in the internet shop at this moment. Decline order - order gets declined due to item unavailability or price mismatch with shop inventory database. Customer sees decline message on Checkout. Order status notification - order status is presented to the customer in Checkout widget. There is a final approval by customer for final amount. Authorize payment - payment gets authorized by payment method specific way. This could be either 3D Secure with 2FA for payment cards or Klix Pin or Fingerprint in case of onboarded mobile user. Payment approval - payment approval notification is shown to the customer, so the customer knows that funds have been authorized. Confirm purchase - Klix send notification to merchant about funds availability and order could be dispatched. In case there is no notification in specified time frame (e.g. 10 minutes) order could be expired and reserved items released back to being available for other customers.","title":"Checkout flow"},{"location":"checkout-flow/#checkout-flow","text":"Order placement could be reflected as sequence diagram with three main parties: customer, KLiX system and Merchant eCommerce system. Place new order - customer is creating new order in one of merchant sales channels (mobile, recurring payment, checkout widget). Notify about new order - merchant gets notified about new pending order. Merchant gets information about items being requested as well as shipment options and specified shipment address. Merchant is required to make a decision about either approving or declining the submitted order. Get pending order details - Merchant receives a callback about new order without all order details. Merchant is required to retrieve a detailed information about order to make a decision. Validate order details and inventory - after receiving full order data merchant should check pricing, shipment options and inventory availability. If everything is ok, merchant should approve order, if not order should be declined. At this moment funds are not yet authorized from customer payment method. Approve order - order gets approved after inventory and pricing check as well as internal fraud rules if such exist. Items should be marked as unavailable in the internet shop at this moment. Decline order - order gets declined due to item unavailability or price mismatch with shop inventory database. Customer sees decline message on Checkout. Order status notification - order status is presented to the customer in Checkout widget. There is a final approval by customer for final amount. Authorize payment - payment gets authorized by payment method specific way. This could be either 3D Secure with 2FA for payment cards or Klix Pin or Fingerprint in case of onboarded mobile user. Payment approval - payment approval notification is shown to the customer, so the customer knows that funds have been authorized. Confirm purchase - Klix send notification to merchant about funds availability and order could be dispatched. In case there is no notification in specified time frame (e.g. 10 minutes) order could be expired and reserved items released back to being available for other customers.","title":"Checkout Flow"},{"location":"client-libraries/","text":"Client libraries Klix team maintains official API client libraries which wraps Klix API invocations including request signing and response signature testing using JWS. If you have implemented client library for programming language or popular framework that's not listed here then let us know it so that we might share it with others. Available libraries PHP Github Packagist","title":"Client libraries"},{"location":"client-libraries/#client-libraries","text":"Klix team maintains official API client libraries which wraps Klix API invocations including request signing and response signature testing using JWS. If you have implemented client library for programming language or popular framework that's not listed here then let us know it so that we might share it with others.","title":"Client libraries"},{"location":"client-libraries/#available-libraries","text":"","title":"Available libraries"},{"location":"client-libraries/#php","text":"Github Packagist","title":"PHP"},{"location":"configuration/","text":"Integration configuration Integration configuration is done in Klix Merchant Console. After logging in Merchant Console follow these steps to configure Klix integration. 1. Complete the merchant profile in Merchant Console Fill in merchant data in \"Business Profile view\". Specify URL to merchant's terms conditions. Specify callback URLs in case advanced integration (API callbacks based) is used. 2. Download Klix public key Head to Certificates page and copy public key contents from \"Service Provider Certificate info\" section. Store public key contents in file and use this key to validate the Klix callback payload. Callback payload validation Merchant is obligated to perform JWS validation of Klix callback payload using Klix public key in order to ensure request payload integrity and authenticity. 3. Store API key For each HTTP request sent to Klix header called X - KLIX - Api - Key should be specified. Header value can be obtained from Certificates page \"Merchant Api key info\" section's field \"Api key\". 4. Generate certificate for signing the API requests Generate certificate and download private key file. All data modification requests sent to Klix should be signed using this private key. Klix will use merchant certificate public key to check each data modification request payload integrity and authenticity. In order to understand which merchant's certificate should be used to validate a request JWS header kid value should be specified. Header value can be obtained from Certificates page corresponding certificate's field \"Name\". Security notice Merchant is reponsible for storing certificate's private key securely. Merchant can generate a new certificate in Merchant Console and use this certificate to sign request payload. Note that in such case JWS header kid value should match new certificate's name. 5. Create a widget Head to Widgets section to create a new widget. Klix widget is Klix form configuration representation that is identifiable by it's id. There are two types of widgets: Static widget Dynamic widget See Widget section for more detailed description of widget types amd configuration.","title":"Configuration"},{"location":"configuration/#integration-configuration","text":"Integration configuration is done in Klix Merchant Console. After logging in Merchant Console follow these steps to configure Klix integration.","title":"Integration configuration"},{"location":"configuration/#1-complete-the-merchant-profile-in-merchant-console","text":"Fill in merchant data in \"Business Profile view\". Specify URL to merchant's terms conditions. Specify callback URLs in case advanced integration (API callbacks based) is used.","title":"1. Complete the merchant profile in Merchant Console"},{"location":"configuration/#2-download-klix-public-key","text":"Head to Certificates page and copy public key contents from \"Service Provider Certificate info\" section. Store public key contents in file and use this key to validate the Klix callback payload. Callback payload validation Merchant is obligated to perform JWS validation of Klix callback payload using Klix public key in order to ensure request payload integrity and authenticity.","title":"2. Download Klix public key"},{"location":"configuration/#3-store-api-key","text":"For each HTTP request sent to Klix header called X - KLIX - Api - Key should be specified. Header value can be obtained from Certificates page \"Merchant Api key info\" section's field \"Api key\".","title":"3. Store API key"},{"location":"configuration/#4-generate-certificate-for-signing-the-api-requests","text":"Generate certificate and download private key file. All data modification requests sent to Klix should be signed using this private key. Klix will use merchant certificate public key to check each data modification request payload integrity and authenticity. In order to understand which merchant's certificate should be used to validate a request JWS header kid value should be specified. Header value can be obtained from Certificates page corresponding certificate's field \"Name\". Security notice Merchant is reponsible for storing certificate's private key securely. Merchant can generate a new certificate in Merchant Console and use this certificate to sign request payload. Note that in such case JWS header kid value should match new certificate's name.","title":"4. Generate certificate for signing the API requests"},{"location":"configuration/#5-create-a-widget","text":"Head to Widgets section to create a new widget. Klix widget is Klix form configuration representation that is identifiable by it's id. There are two types of widgets: Static widget Dynamic widget See Widget section for more detailed description of widget types amd configuration.","title":"5. Create a widget"},{"location":"quick-start-guide/","text":"Quick Start Guide 1. Get access to Klix Merchant Console Klix Merchant Console is a self-service web-page for merchant and order data management. In order to access Merchant Console contact support@klix.app and request merchant onboarding in Klix. Make sure to specify IP address from which Klix solution will be accessed and e-mail address for logging into Merchant Console. Merchant Console invitation e-mail will be sent after request has been reviewed. 2. Decide which integration scenario suits you best There are two types of integration scenarios currently supported by Klix. Choose one depending on a type of your existing web-shop: Simple integration that's used in case if Klix is integrated with static homepage. For each product separate Klix Instant Widget should be created and widget's HTML code should be placed on merchant's product page. This integration type is suitable for rather small product catalog (up to 10 - 15 products). More advanced integration that's used in case if Klix is integrated with custom built or standard e-commerce platform web-shop. Single Klix Checkout Widget can be created to handle multi-product shopping carts and unlimited product catalogs. This requires callbacks implementation in merchant's web store. 3. Provide integration configuration in Merchant Console Follow registration link in Merchant Console invitation e-mail and specify new password. After registration follow these steps to configure integration. 4. Add widget HTML code to your web-page Add Klix Widget HTML code to your product or checkout page depending on a type of used widget (instant, checkout) and your web-shop specifics. More information about widget configuration can be found on Widget page. 5. Implement callbacks Callbacks should be implemented only in case if Klix Checkout Widget is used. Multiple callbacks correspond to different order lifecycle phases. Simple Klix Widget does not require implementing callbacks in your web-shop. 6. Implement order approval/decling API calls In case of Klix Checkout Widget each order should be verified and either approved or declined by merchant's web-shop before actual payment is initiated. After customer has approved a payment Klix sends a callback to merchant's web-shop. Merchant's web-shop should perform order validation e.g. check that product prices are valid and products are still available in stock and either approve or decline this order via Klix API . 7. Test integration Klix provides fully functional test environment that can be used to perform end to end integration implementation testing . 8. Sign agreement and request access to production environment After integration has beed successfully tested on test environment you can proceed with creadentials request for production.","title":"Quick start guide"},{"location":"quick-start-guide/#quick-start-guide","text":"","title":"Quick Start Guide"},{"location":"quick-start-guide/#1-get-access-to-klix-merchant-console","text":"Klix Merchant Console is a self-service web-page for merchant and order data management. In order to access Merchant Console contact support@klix.app and request merchant onboarding in Klix. Make sure to specify IP address from which Klix solution will be accessed and e-mail address for logging into Merchant Console. Merchant Console invitation e-mail will be sent after request has been reviewed.","title":"1. Get access to Klix Merchant Console"},{"location":"quick-start-guide/#2-decide-which-integration-scenario-suits-you-best","text":"There are two types of integration scenarios currently supported by Klix. Choose one depending on a type of your existing web-shop: Simple integration that's used in case if Klix is integrated with static homepage. For each product separate Klix Instant Widget should be created and widget's HTML code should be placed on merchant's product page. This integration type is suitable for rather small product catalog (up to 10 - 15 products). More advanced integration that's used in case if Klix is integrated with custom built or standard e-commerce platform web-shop. Single Klix Checkout Widget can be created to handle multi-product shopping carts and unlimited product catalogs. This requires callbacks implementation in merchant's web store.","title":"2. Decide which integration scenario suits you best"},{"location":"quick-start-guide/#3-provide-integration-configuration-in-merchant-console","text":"Follow registration link in Merchant Console invitation e-mail and specify new password. After registration follow these steps to configure integration.","title":"3. Provide integration configuration in Merchant Console"},{"location":"quick-start-guide/#4-add-widget-html-code-to-your-web-page","text":"Add Klix Widget HTML code to your product or checkout page depending on a type of used widget (instant, checkout) and your web-shop specifics. More information about widget configuration can be found on Widget page.","title":"4. Add widget HTML code to your web-page"},{"location":"quick-start-guide/#5-implement-callbacks","text":"Callbacks should be implemented only in case if Klix Checkout Widget is used. Multiple callbacks correspond to different order lifecycle phases. Simple Klix Widget does not require implementing callbacks in your web-shop.","title":"5. Implement callbacks"},{"location":"quick-start-guide/#6-implement-order-approvaldecling-api-calls","text":"In case of Klix Checkout Widget each order should be verified and either approved or declined by merchant's web-shop before actual payment is initiated. After customer has approved a payment Klix sends a callback to merchant's web-shop. Merchant's web-shop should perform order validation e.g. check that product prices are valid and products are still available in stock and either approve or decline this order via Klix API .","title":"6. Implement order approval/decling API calls"},{"location":"quick-start-guide/#7-test-integration","text":"Klix provides fully functional test environment that can be used to perform end to end integration implementation testing .","title":"7. Test integration"},{"location":"quick-start-guide/#8-sign-agreement-and-request-access-to-production-environment","text":"After integration has beed successfully tested on test environment you can proceed with creadentials request for production.","title":"8. Sign agreement and request access to production environment"},{"location":"security/","text":"Protocol Security Every data modification request sent by merchant to Klix should be signed by merchant private key and validated on Klix side by merchant public key. It is important to use asymmetric cryptography algorithm to have non-disputable transactions in e-commerce. Especially in pricing and quotes area. Shared keys could be stolen from both parties thus making Klix liable of potential data and financial losses. Transport-Level Security All communication is going via HTTPS TLS 1.2 protocol. Klix is using trusted certificates from a well-known certificate authority. In addition to TLS IP range limitation and redirect domain control is in place. API Key The very first level of Merchant API security is a shared API key. API key is generated for Merchant user and should be sent in HTTP header with every request. It allows identifying that requests are coming from legit user. Name of the HTTP header to be used for submitting API Key is ' X-KLIX-Api-Key '. JWS Signature Private and public key pairs are issued by Klix PKI (Public Key Infrastructure) server. It is possible to generate a new RSA 2048 key pair in Merchant Console - Certificates page. When clicking \u201cGENERATE NEW CERTIFICATE\u201d private key is downloaded to user machine, and public key is kept in Klix database. JWS compact should be used for signing all REST API requests. A JSON Web Signature (abbreviated JWS) is an IETF-proposed standard [RFC7515] for signing arbitrary data. 1 \u201cJWS compact serialization represents a signed JWT as a compact URL-safe string. This compact string has three main elements separated by periods (.): the JOSE header, the JWS payload and the JWS signature. If you use compact serialization against a JSON payload (or any payload\u200a\u2014\u200aeven XML), then you can have only a single signature, which is computed over the complete JOSE header and JWS payload.\u201d 2 This is Java code 3 example using Nimbus Jose JWT open source library. It generates an RSA private/public key pair and signs it with JWS signature. In real environment merchant API user would be using a private key generated from Klix Merchant Console. import com.nimbusds.jose.* ; import com.nimbusds.jose.crypto.* ; import com.nimbusds.jose.jwk.* ; import com.nimbusds.jose.jwk.gen.* ; // RSA signatures require a public and private RSA key pair, // the public key must be made known to the JWS recipient to // allow the signatures to be verified RSAKey rsaJWK = new RSAKeyGenerator ( 2048 ) . keyID ( 123 ) . generate (); RSAKey rsaPublicJWK = rsaJWK . toPublicJWK (); // Create RSA-signer with the private key JWSSigner signer = new RSASSASigner ( rsaJWK ); // Prepare JWS object with simple string as payload JWSObject jwsObject = new JWSObject ( new JWSHeader . Builder ( JWSAlgorithm . RS256 ). keyID ( rsaJWK . getKeyID ()). build (), new Payload ( In RSA we trust! )); // Compute the RSA signature jwsObject . sign ( signer ); // To serialize to compact form, produces something like // eyJhbGciOiJSUzI1NiJ9.SW4gUlNBIHdlIHRydXN0IQ.IRMQENi4nJyp4er2L // mZq3ivwoAjqa1uUkSBKFIX7ATndFF5ivnt-m8uApHO4kfIFOrW7w2Ezmlg3Qd // maXlS9DhN0nUk_hGI3amEjkKd0BWYCB8vfUbUv0XGjQip78AI4z1PrFRNidm7 // -jPDm5Iq0SZnjKjCNS5Q15fokXZc8u0A String s = jwsObject . serialize (); // To parse the JWS and verify it, e.g. on client-side jwsObject = JWSObject . parse ( s ); JWSVerifier verifier = new RSASSAVerifier ( rsaPublicJWK ); assertTrue ( jwsObject . verify ( verifier )); assertEquals ( In RSA we trust! , jwsObject . getPayload (). toString ()); JWS signed content should be used in all POST, DELETE, PUT requests to confirm data modification or financial operations such as Order. GET requests should not be signed with JWS. Key ID (kid) parameter should be taken from Merchant Console. There are JWS libraries available for all common implementation platforms: PHP, Node.js, .NET, etc. Up-to-date list of implementation is available here https://openid.net/developers/jwt/ . Merchant RSA Key Pair generation guidelines: Each key pair is assigned a unique identifier in KIiX database; Merchant private key is not stored in Klix and its responsibility of merchant to keep it secure; Key could be revoked by the merchant or Klix admin at any time; Multiple keys could be active at the same time. JWS \u2018 kid \u2019 parameter helps to identify which key is used in a particular request; Default Key expiration time is 2 calendar years. This is defined on PKI policies level; Notifications about key status changes (as well as expiration reminders) should be sent to merchant email address (and potentially SMS); Requests going from Klix to merchant defined callback URL are also signed digitally using Klix private key and validated using public key, which is available in Merchant Console. JWS signature content could be debugged inside online tool https://jwt.io/ . Do not share your private key content online, since it will be compromised! https://en.wikipedia.org/wiki/JSON_Web_Signature https://medium.facilelogin.com/jwt-jws-and-jwe-for-not-so-dummies-b63310d201a3 https://connect2id.com/products/nimbus-jose-jwt/examples/jws-with-rsa-signature","title":"Security"},{"location":"security/#protocol-security","text":"Every data modification request sent by merchant to Klix should be signed by merchant private key and validated on Klix side by merchant public key. It is important to use asymmetric cryptography algorithm to have non-disputable transactions in e-commerce. Especially in pricing and quotes area. Shared keys could be stolen from both parties thus making Klix liable of potential data and financial losses.","title":"Protocol Security"},{"location":"security/#transport-level-security","text":"All communication is going via HTTPS TLS 1.2 protocol. Klix is using trusted certificates from a well-known certificate authority. In addition to TLS IP range limitation and redirect domain control is in place.","title":"Transport-Level Security"},{"location":"security/#api-key","text":"The very first level of Merchant API security is a shared API key. API key is generated for Merchant user and should be sent in HTTP header with every request. It allows identifying that requests are coming from legit user. Name of the HTTP header to be used for submitting API Key is ' X-KLIX-Api-Key '.","title":"API Key"},{"location":"security/#jws-signature","text":"Private and public key pairs are issued by Klix PKI (Public Key Infrastructure) server. It is possible to generate a new RSA 2048 key pair in Merchant Console - Certificates page. When clicking \u201cGENERATE NEW CERTIFICATE\u201d private key is downloaded to user machine, and public key is kept in Klix database. JWS compact should be used for signing all REST API requests. A JSON Web Signature (abbreviated JWS) is an IETF-proposed standard [RFC7515] for signing arbitrary data. 1 \u201cJWS compact serialization represents a signed JWT as a compact URL-safe string. This compact string has three main elements separated by periods (.): the JOSE header, the JWS payload and the JWS signature. If you use compact serialization against a JSON payload (or any payload\u200a\u2014\u200aeven XML), then you can have only a single signature, which is computed over the complete JOSE header and JWS payload.\u201d 2 This is Java code 3 example using Nimbus Jose JWT open source library. It generates an RSA private/public key pair and signs it with JWS signature. In real environment merchant API user would be using a private key generated from Klix Merchant Console. import com.nimbusds.jose.* ; import com.nimbusds.jose.crypto.* ; import com.nimbusds.jose.jwk.* ; import com.nimbusds.jose.jwk.gen.* ; // RSA signatures require a public and private RSA key pair, // the public key must be made known to the JWS recipient to // allow the signatures to be verified RSAKey rsaJWK = new RSAKeyGenerator ( 2048 ) . keyID ( 123 ) . generate (); RSAKey rsaPublicJWK = rsaJWK . toPublicJWK (); // Create RSA-signer with the private key JWSSigner signer = new RSASSASigner ( rsaJWK ); // Prepare JWS object with simple string as payload JWSObject jwsObject = new JWSObject ( new JWSHeader . Builder ( JWSAlgorithm . RS256 ). keyID ( rsaJWK . getKeyID ()). build (), new Payload ( In RSA we trust! )); // Compute the RSA signature jwsObject . sign ( signer ); // To serialize to compact form, produces something like // eyJhbGciOiJSUzI1NiJ9.SW4gUlNBIHdlIHRydXN0IQ.IRMQENi4nJyp4er2L // mZq3ivwoAjqa1uUkSBKFIX7ATndFF5ivnt-m8uApHO4kfIFOrW7w2Ezmlg3Qd // maXlS9DhN0nUk_hGI3amEjkKd0BWYCB8vfUbUv0XGjQip78AI4z1PrFRNidm7 // -jPDm5Iq0SZnjKjCNS5Q15fokXZc8u0A String s = jwsObject . serialize (); // To parse the JWS and verify it, e.g. on client-side jwsObject = JWSObject . parse ( s ); JWSVerifier verifier = new RSASSAVerifier ( rsaPublicJWK ); assertTrue ( jwsObject . verify ( verifier )); assertEquals ( In RSA we trust! , jwsObject . getPayload (). toString ()); JWS signed content should be used in all POST, DELETE, PUT requests to confirm data modification or financial operations such as Order. GET requests should not be signed with JWS. Key ID (kid) parameter should be taken from Merchant Console. There are JWS libraries available for all common implementation platforms: PHP, Node.js, .NET, etc. Up-to-date list of implementation is available here https://openid.net/developers/jwt/ . Merchant RSA Key Pair generation guidelines: Each key pair is assigned a unique identifier in KIiX database; Merchant private key is not stored in Klix and its responsibility of merchant to keep it secure; Key could be revoked by the merchant or Klix admin at any time; Multiple keys could be active at the same time. JWS \u2018 kid \u2019 parameter helps to identify which key is used in a particular request; Default Key expiration time is 2 calendar years. This is defined on PKI policies level; Notifications about key status changes (as well as expiration reminders) should be sent to merchant email address (and potentially SMS); Requests going from Klix to merchant defined callback URL are also signed digitally using Klix private key and validated using public key, which is available in Merchant Console. JWS signature content could be debugged inside online tool https://jwt.io/ . Do not share your private key content online, since it will be compromised! https://en.wikipedia.org/wiki/JSON_Web_Signature https://medium.facilelogin.com/jwt-jws-and-jwe-for-not-so-dummies-b63310d201a3 https://connect2id.com/products/nimbus-jose-jwt/examples/jws-with-rsa-signature","title":"JWS Signature"},{"location":"testing-integration/","text":"Integration testing Environments Klix provides fully functional test environment that can be used to test Klix integration implementation without a need to use real bank cards or make actual transactions. Follow instructions in quick start guide to receive access to test both Merchant Console and API. Service Test environment Production environment Merchant Conssole https://mc.stage.klix.app https://mc.klix.app Merchant API https://api.stage.klix.app https://api.klix.app Widget Javascript base path https://klix.blob.core.windows.net/stage/widget/build/ https://klix.blob.core.windows.net/public/widget/build/ Test environment bank cards Test environment is not connected to real bank card issuer networks therefore only special test cards can be used in test environment. Issuer PAN CVV Expiry date 3D secure password VISA 4314 2200 0000 0056 123 01/22 hint MASTERCARD 5413 3300 0000 0019 589 01/22 hint Note that any cardholder name can be used with these cards.","title":"Testing integration"},{"location":"testing-integration/#integration-testing","text":"","title":"Integration testing"},{"location":"testing-integration/#environments","text":"Klix provides fully functional test environment that can be used to test Klix integration implementation without a need to use real bank cards or make actual transactions. Follow instructions in quick start guide to receive access to test both Merchant Console and API. Service Test environment Production environment Merchant Conssole https://mc.stage.klix.app https://mc.klix.app Merchant API https://api.stage.klix.app https://api.klix.app Widget Javascript base path https://klix.blob.core.windows.net/stage/widget/build/ https://klix.blob.core.windows.net/public/widget/build/","title":"Environments"},{"location":"testing-integration/#test-environment-bank-cards","text":"Test environment is not connected to real bank card issuer networks therefore only special test cards can be used in test environment. Issuer PAN CVV Expiry date 3D secure password VISA 4314 2200 0000 0056 123 01/22 hint MASTERCARD 5413 3300 0000 0019 589 01/22 hint Note that any cardholder name can be used with these cards.","title":"Test environment bank cards"},{"location":"widget/","text":"Checkout JS Widget Checkout Widget placement Checkout Widget is implemented as embeddable Web Component. In order to show Klix checkout widget on a merchant website widget JavaScript should be included in the page and custom HTML tag to be placed in the required location. See the example below for integration code. Widget scripts Please note that Klix Widget JavaScript source should be loaded from different destination in case of production and test environment. Test environment Klix Widget JavaScript base path is https : // klix . blob . core . windows . net / stage / widget / build / . Production environment Klix Widget JavaScript base path is https : // klix . blob . core . windows . net / public / widget / build / . head script type = module src = https://klix.blob.core.windows.net/public/widget/build/klixwidget.esm.js / script script nomodule src = https://klix.blob.core.windows.net/public/widget/build/klixwidget.js / script / head body KLIX embedded checkout: klix-checkout language = lv widget-id = 604419cc-c313-4e47-93e8-330385669bdb / klix-checkout / body Integration code could be accessed and copied from Merchant Console application. Widget Configuration Widget entity with according Widget Type should be created and configured in Merchant Console (MC). Generated Widget ID is used later for embedding Web Component into Merchant HTML page. Specifying widget language Widget language can be specified using attribute language e.g. \"lv\" for Latvian, \"en\" for English or \"ru\" for Russian. klix-checkout language = lv widget-id = 604419cc-c313-4e47-93e8-330385669bdb / klix-checkout Prefilling Klix widget form data Klix widget form data prefilling allows to reduce amount of fields that needs to be entred by customer in Klix form in situations where some or all of required customer information was previously entered in merchant's webpage e.g. in case if Klix form is presented to exsiting merchant's customer or customer needs to fill specific form on merchant's page before continuing with Klix form. Klix widget supports prefilling form with customer data specified as Klix widget attributes. Customer phone number, e-mail, first name and last name can be passed to widget: klix-checkout widget-id = ... language = lv email = john.doe@klix.app phone = 37120000000 first-name = John last-name = Doe class = hydrated / klix-checkout Note that partial data prefill is supported i.e. if only firstname and last name of customer is passed to Klix widget it will be prefilled after non existing Klix customer enters his mobile phone number. In case there's no Klix customer with specified mobile phone number Klix widget form will be prefilled with specified data. Otherwise Klix widget data autofill is triggered automatically so that customer receives autofill notifcation in his mobile phone. INSTANT (Fixed Price) Widget Type It is possible to generate a checkout widget for a fixed amount. In this case no validation on merchant side is required - all order items are defined at widget configuration in Merchant Console (MC). They can\u2019t be overwritten by Widget HTML API or Widget JS API (specified later in the document) for security purposes. This type of Widget allows lightweight integration with merchant - no merchant back-end is required for integration. Widget language is specified either in page tag or in according widget tag. html lang = lv ... checkout-widget widget-id = ... / checkout-widget OR checkout-widget widget-id = ... language = lv / checkout-widget CHECKOUT (Dynamic Price) Widget Type In case Merchant has Back-end or resources to implement integration via Merchant Back-end (order verification / confirmation REST end-points) it might be more convenient to use this type of widget. One instance (created in MC ) should be enough for all Merchant orders. Order items should be provided either via Widget HTML API (widget tag attributes) or via Widget JS API . Widget language is defined in the same manner as in Fixed Price Widget type. HTML API for single order item Tax could be defined as rate (0.XX) or percentage (number greater than 1 without \u2018%\u2019 symbol). Tax rate default value is merchant specific (e.g. for merchants registered in LV it would be \"0.21\"). Currency default value is merchant specific as well (e.g. for merchants registered in EU it would be \"EUR\"). All HTML widgets below are equivalent for merchant registered in LV: checkout-widget widget-id = ... amount = 1.99 currency = EUR label = Philips XR3857 tax-rate = 0.21 count = 1 unit = PIECE / checkout-widget checkout-widget widget-id = ... amount = 1.99 currency = EUR label = Philips XR3857 tax-rate = 21 / checkout-widget checkout-widget widget-id = ... amount = 1.99 currency = EUR label = Philips XR3857 / checkout-widget checkout-widget widget-id = ... amount = 1.99 label = Philips XR3857 / checkout-widget HTML API for multiple order items checkout-widget widget-id = ... order = { items :[{ amount :40, currency : EUR , count :2, unit : PIECE , label : Philips XR3857 , taxRate :0.21},{ amount :5, label : Pieg\u0101de }]} / checkout-widget OR checkout-widget widget-id = ... order = { quot;items quot;:[{ quot;amount quot;:40, quot;currency quot;: quot;EUR quot;, quot;count quot;:2, quot;label quot;: quot;Philips XR3857 quot;, quot;taxRate quot;:0.21},{ quot;amount quot;:5, quot;label quot;: quot;Pieg\u0101de quot;}]} / checkout-widget Also product name value needs to be properly escaped (e.g. using amp ; for , lt ; for , # 39 ; for , # 34 ; for , etc.) to be a valid HTML attribute value. Implementation details // merchant order let orderObject = { items : [ { amount : 40 , currency : EUR , label : Philips XR3857 , taxRate : 0.21 }, { amount : 5 , label : Pieg\u0101de } ], shippingOptions : [ { id : pickup , amount : 0 }, { id : omniva , amount : 3 , currency : EUR , taxRate : 0.21 }, { id : latvijaspasts }] }; // this value goes into widget order attribute let orderAttribute = JSON . stringify ( orderObject ); // this value goes into HTML attribute (e.g. client side templating) let escaped = orderAttribute . split ( ). join ( amp; ). split ( ) . join ( lt; ). split ( ). join ( #39; ). split ( ). join ( #34; ); // this value is received as widget internal state let orderObjectInWidget = JSON . parse ( orderAttribute ); JS API for single and multiple order items Widget lazy attribute is used to delay widget initialization (until configuration via Widget JS API is completed): checkout-widget id = my-checkout-widget widget-id = ... lazy = true / checkout-widget ... script let checkoutWidget = document . querySelector ( #my-checkout-widget ); checkoutWidget . addOrderItem ( { amount : 40 , currency : EUR , label : Philips XR3857 , count : 2 , unit : PIECE , taxRate : 0.21 }); checkoutWidget . addOrderItem ({ amount : 5 , label : Pieg\u0101de }); // pick-up at store, free of charge checkoutWidget . addShippingOption ({ id : pickup , amount : 0 }); // shipping price is unknown, separate request will be initiated // for entered (by customer) address via Merchant API checkoutWidget . addShippingOption ({ id : latvijaspasts }); // shipping price (before tax) and tax rate are known for // given product/cart (whatever selected address or pickup point) checkoutWidget . addShippingOption ({ id : myIdForPickupProvider , amount : 5 , currency : EUR , taxRate : 0.21 }); checkoutWidget . init (); / script Order Item attributes Name Mandatory Default value Description amount Yes n/a Price per unit currency No Merchant specific (EUR in Latvia) Alphabetic code ISO 4217 label Yes n/a Product or service name count No 1 Quantity unit No PIECE {PIECE, KILOGRAM, METER, LITRE, HOUR} taxRate No Merchant specific (0.21 in Latvia) VAT orderItemId No null Product ID in merchant system for reference purposes Javascript callbacks Klix widget uses Custom DOM events to communicate with merchant page. In order to listen specifc Klix widget event appropriate event listener should be registered first. Payment completed callback Event with type paymentCompleted is published in case of successfull or failed payment right before payment status screen is shown to customer. Event handler can be used to dynamically update merchant page contents according to payment processing result. klix-checkout widget-id = ... order = ... / klix-checkout script const checkoutElement = document . querySelector ( klix-checkout ); checkoutElement . addEventListener ( paymentCompleted , event = { const message = Order with id + event . detail [ orderId ] + payment succeeded - + event . detail [ paymentSucceeded ]; window . alert ( message ); }); / script Following event properties can be used: Property Type Description event.detail[\"orderId\"] string Completed payment order identifier event.detail[\"paymentSucceeded\"] boolean Indicates if payment succeeded or failed Limiting accepted cards By default all cards issued by Mastercard and VISA are accepted by Klix however following constraints can be imposed via order configuration if needed: Constraint Configuration example Description Accepted card issuer constraints : { issuer : Citadele } Only cards issued by Citadele bank are accepted for this payment Accepted card brand constraints : { brand : X karte } Only Citadele \"X karte\" brand cards are accepted for this payment Accepted card payment scheme constraints : { paymentScheme : VISA } Only VISA cards are accepted for this payment checkout-widget widget-id = ... order = { quot;constraints quot;:{ quot;issuer quot;: quot;Citadele quot;}, quot;items quot;:[{ quot;amount quot;:40, quot;currency quot;: quot;EUR quot;, quot;count quot;:2, quot;label quot;: quot;Philips XR3857 quot;, quot;taxRate quot;:0.21}]} / checkout-widget","title":"Widget"},{"location":"widget/#checkout-js-widget","text":"","title":"Checkout JS Widget"},{"location":"widget/#checkout-widget-placement","text":"Checkout Widget is implemented as embeddable Web Component. In order to show Klix checkout widget on a merchant website widget JavaScript should be included in the page and custom HTML tag to be placed in the required location. See the example below for integration code. Widget scripts Please note that Klix Widget JavaScript source should be loaded from different destination in case of production and test environment. Test environment Klix Widget JavaScript base path is https : // klix . blob . core . windows . net / stage / widget / build / . Production environment Klix Widget JavaScript base path is https : // klix . blob . core . windows . net / public / widget / build / . head script type = module src = https://klix.blob.core.windows.net/public/widget/build/klixwidget.esm.js / script script nomodule src = https://klix.blob.core.windows.net/public/widget/build/klixwidget.js / script / head body KLIX embedded checkout: klix-checkout language = lv widget-id = 604419cc-c313-4e47-93e8-330385669bdb / klix-checkout / body Integration code could be accessed and copied from Merchant Console application.","title":"Checkout Widget placement"},{"location":"widget/#widget-configuration","text":"Widget entity with according Widget Type should be created and configured in Merchant Console (MC). Generated Widget ID is used later for embedding Web Component into Merchant HTML page.","title":"Widget Configuration"},{"location":"widget/#specifying-widget-language","text":"Widget language can be specified using attribute language e.g. \"lv\" for Latvian, \"en\" for English or \"ru\" for Russian. klix-checkout language = lv widget-id = 604419cc-c313-4e47-93e8-330385669bdb / klix-checkout","title":"Specifying widget language"},{"location":"widget/#prefilling-klix-widget-form-data","text":"Klix widget form data prefilling allows to reduce amount of fields that needs to be entred by customer in Klix form in situations where some or all of required customer information was previously entered in merchant's webpage e.g. in case if Klix form is presented to exsiting merchant's customer or customer needs to fill specific form on merchant's page before continuing with Klix form. Klix widget supports prefilling form with customer data specified as Klix widget attributes. Customer phone number, e-mail, first name and last name can be passed to widget: klix-checkout widget-id = ... language = lv email = john.doe@klix.app phone = 37120000000 first-name = John last-name = Doe class = hydrated / klix-checkout Note that partial data prefill is supported i.e. if only firstname and last name of customer is passed to Klix widget it will be prefilled after non existing Klix customer enters his mobile phone number. In case there's no Klix customer with specified mobile phone number Klix widget form will be prefilled with specified data. Otherwise Klix widget data autofill is triggered automatically so that customer receives autofill notifcation in his mobile phone.","title":"Prefilling Klix widget form data"},{"location":"widget/#instant-fixed-price-widget-type","text":"It is possible to generate a checkout widget for a fixed amount. In this case no validation on merchant side is required - all order items are defined at widget configuration in Merchant Console (MC). They can\u2019t be overwritten by Widget HTML API or Widget JS API (specified later in the document) for security purposes. This type of Widget allows lightweight integration with merchant - no merchant back-end is required for integration. Widget language is specified either in page tag or in according widget tag. html lang = lv ... checkout-widget widget-id = ... / checkout-widget OR checkout-widget widget-id = ... language = lv / checkout-widget","title":"INSTANT (Fixed Price) Widget Type"},{"location":"widget/#checkout-dynamic-price-widget-type","text":"In case Merchant has Back-end or resources to implement integration via Merchant Back-end (order verification / confirmation REST end-points) it might be more convenient to use this type of widget. One instance (created in MC ) should be enough for all Merchant orders. Order items should be provided either via Widget HTML API (widget tag attributes) or via Widget JS API . Widget language is defined in the same manner as in Fixed Price Widget type.","title":"CHECKOUT (Dynamic Price) Widget Type"},{"location":"widget/#html-api-for-single-order-item","text":"Tax could be defined as rate (0.XX) or percentage (number greater than 1 without \u2018%\u2019 symbol). Tax rate default value is merchant specific (e.g. for merchants registered in LV it would be \"0.21\"). Currency default value is merchant specific as well (e.g. for merchants registered in EU it would be \"EUR\"). All HTML widgets below are equivalent for merchant registered in LV: checkout-widget widget-id = ... amount = 1.99 currency = EUR label = Philips XR3857 tax-rate = 0.21 count = 1 unit = PIECE / checkout-widget checkout-widget widget-id = ... amount = 1.99 currency = EUR label = Philips XR3857 tax-rate = 21 / checkout-widget checkout-widget widget-id = ... amount = 1.99 currency = EUR label = Philips XR3857 / checkout-widget checkout-widget widget-id = ... amount = 1.99 label = Philips XR3857 / checkout-widget","title":"HTML API for single order item"},{"location":"widget/#html-api-for-multiple-order-items","text":"checkout-widget widget-id = ... order = { items :[{ amount :40, currency : EUR , count :2, unit : PIECE , label : Philips XR3857 , taxRate :0.21},{ amount :5, label : Pieg\u0101de }]} / checkout-widget OR checkout-widget widget-id = ... order = { quot;items quot;:[{ quot;amount quot;:40, quot;currency quot;: quot;EUR quot;, quot;count quot;:2, quot;label quot;: quot;Philips XR3857 quot;, quot;taxRate quot;:0.21},{ quot;amount quot;:5, quot;label quot;: quot;Pieg\u0101de quot;}]} / checkout-widget Also product name value needs to be properly escaped (e.g. using amp ; for , lt ; for , # 39 ; for , # 34 ; for , etc.) to be a valid HTML attribute value.","title":"HTML API for multiple order items"},{"location":"widget/#implementation-details","text":"// merchant order let orderObject = { items : [ { amount : 40 , currency : EUR , label : Philips XR3857 , taxRate : 0.21 }, { amount : 5 , label : Pieg\u0101de } ], shippingOptions : [ { id : pickup , amount : 0 }, { id : omniva , amount : 3 , currency : EUR , taxRate : 0.21 }, { id : latvijaspasts }] }; // this value goes into widget order attribute let orderAttribute = JSON . stringify ( orderObject ); // this value goes into HTML attribute (e.g. client side templating) let escaped = orderAttribute . split ( ). join ( amp; ). split ( ) . join ( lt; ). split ( ). join ( #39; ). split ( ). join ( #34; ); // this value is received as widget internal state let orderObjectInWidget = JSON . parse ( orderAttribute );","title":"Implementation details"},{"location":"widget/#js-api-for-single-and-multiple-order-items","text":"Widget lazy attribute is used to delay widget initialization (until configuration via Widget JS API is completed): checkout-widget id = my-checkout-widget widget-id = ... lazy = true / checkout-widget ... script let checkoutWidget = document . querySelector ( #my-checkout-widget ); checkoutWidget . addOrderItem ( { amount : 40 , currency : EUR , label : Philips XR3857 , count : 2 , unit : PIECE , taxRate : 0.21 }); checkoutWidget . addOrderItem ({ amount : 5 , label : Pieg\u0101de }); // pick-up at store, free of charge checkoutWidget . addShippingOption ({ id : pickup , amount : 0 }); // shipping price is unknown, separate request will be initiated // for entered (by customer) address via Merchant API checkoutWidget . addShippingOption ({ id : latvijaspasts }); // shipping price (before tax) and tax rate are known for // given product/cart (whatever selected address or pickup point) checkoutWidget . addShippingOption ({ id : myIdForPickupProvider , amount : 5 , currency : EUR , taxRate : 0.21 }); checkoutWidget . init (); / script","title":"JS API for single and multiple order items"},{"location":"widget/#order-item-attributes","text":"Name Mandatory Default value Description amount Yes n/a Price per unit currency No Merchant specific (EUR in Latvia) Alphabetic code ISO 4217 label Yes n/a Product or service name count No 1 Quantity unit No PIECE {PIECE, KILOGRAM, METER, LITRE, HOUR} taxRate No Merchant specific (0.21 in Latvia) VAT orderItemId No null Product ID in merchant system for reference purposes","title":"Order Item attributes"},{"location":"widget/#javascript-callbacks","text":"Klix widget uses Custom DOM events to communicate with merchant page. In order to listen specifc Klix widget event appropriate event listener should be registered first.","title":"Javascript callbacks"},{"location":"widget/#payment-completed-callback","text":"Event with type paymentCompleted is published in case of successfull or failed payment right before payment status screen is shown to customer. Event handler can be used to dynamically update merchant page contents according to payment processing result. klix-checkout widget-id = ... order = ... / klix-checkout script const checkoutElement = document . querySelector ( klix-checkout ); checkoutElement . addEventListener ( paymentCompleted , event = { const message = Order with id + event . detail [ orderId ] + payment succeeded - + event . detail [ paymentSucceeded ]; window . alert ( message ); }); / script Following event properties can be used: Property Type Description event.detail[\"orderId\"] string Completed payment order identifier event.detail[\"paymentSucceeded\"] boolean Indicates if payment succeeded or failed","title":"Payment completed callback"},{"location":"widget/#limiting-accepted-cards","text":"By default all cards issued by Mastercard and VISA are accepted by Klix however following constraints can be imposed via order configuration if needed: Constraint Configuration example Description Accepted card issuer constraints : { issuer : Citadele } Only cards issued by Citadele bank are accepted for this payment Accepted card brand constraints : { brand : X karte } Only Citadele \"X karte\" brand cards are accepted for this payment Accepted card payment scheme constraints : { paymentScheme : VISA } Only VISA cards are accepted for this payment checkout-widget widget-id = ... order = { quot;constraints quot;:{ quot;issuer quot;: quot;Citadele quot;}, quot;items quot;:[{ quot;amount quot;:40, quot;currency quot;: quot;EUR quot;, quot;count quot;:2, quot;label quot;: quot;Philips XR3857 quot;, quot;taxRate quot;:0.21}]} / checkout-widget","title":"Limiting accepted cards"}]}